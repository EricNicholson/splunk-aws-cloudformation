{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Splunk deployment with indexer and search head clustering, with auto-healing cluster master.",
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Default": "c4.large",
      "AllowedValues": [
        "c4.large",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "m4.10xlarge",
        "r4.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
     "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation": {
      "Description": "The IP address range that is allowed to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "19",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP range in x.x.x.x/x notation.  Use 0.0.0.0/0 for no restrictions."
    },
    "VPCID": {
      "Description": "VPC ID",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VPCCIDR": {
      "Description": "VPC CIDR Block (x.x.x.x/x notation)",
      "Type": "String",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnet1ID": {
      "Description": "ID of Splunk public subnet 1 in Availability Zone 1 (e.g., subnet-xxxxxxxx)",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet2ID": {
      "Description": "ID of Splunk public subnet 2 in Availability Zone 2 (e.g., subnet-xxxxxxxx)",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "SplunkAdminPassword": {
      "NoEcho": "true",
      "Description": "Admin password for Splunk. (6-32 characters, alphanumeric only)",
      "Type": "String",
      "MinLength": "6",
      "MaxLength": "32",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "Must be alphanumeric only.  6-32 characters"
    },
    "SplunkSecret": {
      "NoEcho": "true",
      "Description": "Shared cluster secret for Search Head and Indexer clusters (6-32 characters, alphanumeric only)",
      "Type": "String",
      "MinLength": "6",
      "MaxLength": "32",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "Must be alphanumeric only.  6-32 characters"
    },
    "SplunkLicenseBucket" : {
      "Description" : "Name of private S3 bucket with licenses to be accessed via authenticated requests",
      "Type" : "String"
    },
    "SplunkLicensePath" : {
      "Description" : "Path to license file in S3 Bucket (without leading '/')",
      "Type" : "String"
    },
    "SplunkIndexerCount": {
      "Description": "How many Splunk indexers to launch.  [3-10]",
      "Type": "Number",
      "MinValue": "3",
      "MaxValue": "10",
      "Default": "3",
      "ConstraintDescription": "must be a valid number, 3-10"
    },
    "SHCEnabled": {
      "Description": "Do you want to build a Splunk search head cluster?",
      "Type": "String",
      "Default": "no",
      "AllowedValues": ["yes", "no"]
    },
    "SHCCount": {
      "Description": "How many search head peers for your cluster?  [3-10]",
      "Type": "Number",
      "MinValue": "3",
      "MaxValue": "10",
      "Default": "3",
      "ConstraintDescription": "must be a valid number, 3-10"
    }
      },
  "Conditions" : {
    "CreateSingleSearchHead" : {"Fn::Equals" : [{"Ref" : "SHCEnabled"}, "no"]},
    "CreateSHC" : {"Fn::Equals" : [{"Ref" : "SHCEnabled"}, "yes"]},
    "ConfigureLicense": {"Fn::And":
      [ 
        {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "SplunkLicenseBucket"}]}]},
        {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "SplunkLicensePath"}]}]}
      ]
    }
  },
  "Mappings": {
    "RegionMap": {
      "ap-south-1": {"AMI": "ami-f7334798"},
      "eu-west-1": {"AMI": "ami-0097d073"},
      "ap-northeast-2": {"AMI": "ami-9c63b6f2"},
      "ap-northeast-1": {"AMI": "ami-c0479ba1"},
      "sa-east-1": {"AMI": "ami-dd2ebdb1"},
      "ca-central-1": {"AMI": "ami-105eec74"},
      "ap-southeast-1": {"AMI": "ami-52d87c31"},
      "ap-southeast-2": {"AMI": "ami-22576441"},
      "eu-central-1": {"AMI": "ami-b61fe3d9"},
      "us-east-1": {"AMI": "ami-231d5b34"},
      "us-east-2": {"AMI": "ami-fbf5ae9e"},
      "us-west-1": {"AMI": "ami-98ce80f8"},
      "us-west-2": {"AMI": "ami-b8835dd8"}
    },
    "SplunkConfig": {
      "indexer-disk-size": {"gb": "200"},
      "searchhead-disk-size": {"gb": "100"},
      "cluster-replication-factor": {"repfactor": "2"},
      "cluster-search-factor": {"searchfactor": "2"}
    }
  },
  "Resources": {
    "SplunkSearchHeadSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPCID"},
        "GroupDescription": "Enable port 8000 for Splunk web interface",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8000",
            "ToPort": "8000",
            "CidrIp": {"Ref": "SSHLocation"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8090",
            "ToPort": "8090",
            "CidrIp": {"Ref": "VPCCIDR"}
          }
        ],
        "Tags": [
          { "Key": "Application", "Value": {"Ref": "AWS::StackId"} },
          { "Key": "Name", "Value": "SplunkSearchHeadSecurityGroup" }
        ]
      }
    },
    "SplunkSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPCID"},
        "GroupDescription": "Enable SSH, and all Splunk-related ports except web interface",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {"Ref": "SSHLocation"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8089",
            "ToPort": "8089",
            "CidrIp": {"Ref": "VPCCIDR"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9997",
            "ToPort": "9997",
            "CidrIp": {"Ref": "VPCCIDR"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9887",
            "ToPort": "9887",
            "CidrIp": {"Ref": "VPCCIDR"}
          },
          {
            "IpProtocol": "udp",
            "FromPort": "514",
            "ToPort": "514",
            "CidrIp": {"Ref": "VPCCIDR"}
          }
        ],
        "Tags": [
          { "Key": "Application", "Value": {"Ref": "AWS::StackId"} },
          { "Key": "Name", "Value": "SplunkSecurityGroup" }
        ]
      }
    },
    "SplunkSearchHeadInstance": {
      "Type": "AWS::EC2::Instance",
      "Condition": "CreateSingleSearchHead",
      "DependsOn": "SplunkCMASG",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "AMI"]
            },
        "SecurityGroupIds": [
          {"Ref": "SplunkSecurityGroup"},
          {"Ref": "SplunkSearchHeadSecurityGroup"}
        ],
        "SubnetId": {"Ref": "PublicSubnet1ID"},
        "InstanceType": {"Ref": "InstanceType"},
        "KeyName": {"Ref": "KeyName"},
        "Tags": [
          { "Key": "Application", "Value": {"Ref": "AWS::StackId"} },
          { "Key": "Role", "Value": "splunk-search-head" },
          { "Key": "Name", "Value": "search-head" }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": {
                "Fn::FindInMap": ["SplunkConfig", "searchhead-disk-size", "gb"]
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",

                "export SPLUNK_USER=splunk\n",
                "export SPLUNK_BIN=/opt/splunk/bin/splunk\n",
                "export SPLUNK_HOME=/opt/splunk\n",
                "export LOCALIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "export INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                "printf '%s\t%s\n' \"$LOCALIP\" 'splunksearch' >> /etc/hosts\n",
                "hostname splunksearch\n",
                "$SPLUNK_BIN stop\n",
                "mv /opt/splunk/etc/passwd /opt/splunk/etc/passwd.bak\n",
                "mkdir -p /opt/splunk/.splunk ; chown splunk:splunk /opt/splunk/.splunk\n",
                "mkdir -p /opt/splunk/etc/licenses/enterprise\n",
                "chown -R splunk:splunk /opt/splunk/etc/\n",
                "$SPLUNK_BIN enable boot-start -user splunk --accept-license --answer-yes --no-prompt\n",
                "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",

                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN start\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit user admin -password ",
                {
                  "Ref": "SplunkAdminPassword"
                },
                " -role admin -auth admin:changeme\n",
                "touch /opt/splunk/etc/.ui_login\n",

                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit licenser-localslave -master_uri https://",
                {
                  "Fn::GetAtt": [
                    "SplunkELB",
                    "DNSName"
                  ]
                },
                ":8089 -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config -secret ",
                {
                  "Ref": "SplunkSecret"
                },
                " -mode searchhead -master_uri https://",
                {
                  "Fn::GetAtt": [
                    "SplunkELB",
                    "DNSName"
                  ]
                },
                ":8089 -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN stop\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN start --accept-license --answer-yes --no-prompt\n",

                "/opt/aws/bin/cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" },
                " --resource SplunkSearchHeadInstance",
                " --region ", { "Ref" : "AWS::Region" }, "\n",

                "usermod --expiredate 1 splunk\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT30M"
        }
      }
    },

    "SplunkSHCDeployer": {
      "Type": "AWS::EC2::Instance",
      "Condition": "CreateSHC",
      "DependsOn": "SplunkCMASG",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI" ] },
        "SecurityGroupIds": [
          { "Ref": "SplunkSecurityGroup" },
          { "Ref": "SplunkSearchHeadSecurityGroup" }
        ],
        "SubnetId": { "Ref": "PublicSubnet1ID" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Role", "Value": "splunk-search-head" },
          { "Key": "Name", "Value": "deployer" }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": { "Fn::FindInMap": [ "SplunkConfig", "searchhead-disk-size", "gb" ] }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",
              
                "export LOCALIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "export INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                "export SPLUNK_USER=splunk\n",
                "export SPLUNK_BIN=/opt/splunk/bin/splunk\n",
                "export SPLUNK_HOME=/opt/splunk\n",

                "printf '%s\t%s\n' \"$LOCALIP\" 'splunk-shc-deployer' >> /etc/hosts\n",
                "hostname splunk-shc-deployer\n",

                "# Stop Splunk and reset password\n",
                "service splunk stop\n",
                "touch $SPLUNK_HOME/etc/.ui_login\n",
                "mv $SPLUNK_HOME/etc/passwd $SPLUNK_HOME/etc/passwd.bak\n",
                "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit user admin -password ", { "Ref": "SplunkAdminPassword" }, " -role admin -auth admin:changeme\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN start\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit licenser-localslave ",
                  "-master_uri https://", { "Fn::GetAtt": [ "SplunkELB", "DNSName" ] }, ":8089 ",
                  "-auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",
                "printf '\n%s\n%s = %s\n' [shclustering] pass4SymmKey  '", { "Ref": "SplunkSecret"}, "'  >> /opt/splunk/etc/system/local/server.conf\n",
                
                "printf '%s = %s\n' shcluster_label SplunkSHC >> /opt/splunk/etc/system/local/server.conf\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN restart\n",

                "/opt/aws/bin/cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" },
                " --resource SplunkSHCDeployer",
                " --region ", { "Ref" : "AWS::Region" }, "\n",

                "usermod --expiredate 1 splunk\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT30M"
        }
      }
    },

    "SplunkSHCMember1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "CreateSHC",
      "DependsOn": "SplunkSHCDeployer",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Role", "Value": "splunk-search-head" },
          { "Key": "Name", "Value": "search-head-1" }
        ],
        "NetworkInterfaces": [{
          "GroupSet": [
            { "Ref": "SplunkSecurityGroup" },
            { "Ref": "SplunkSearchHeadSecurityGroup" }
          ],
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "DeleteOnTermination": "true",
          "SubnetId": { "Ref": "PublicSubnet1ID" }
        }],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": { "Fn::FindInMap": [ "SplunkConfig", "searchhead-disk-size", "gb" ] }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",
                
                "export LOCALIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "export INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                "export SPLUNK_USER=splunk\n",
                "export SPLUNK_BIN=/opt/splunk/bin/splunk\n",
                "export SPLUNK_HOME=/opt/splunk\n",

                "printf '%s\t%s\n' \"$LOCALIP\" 'splunksearch' >> /etc/hosts\n",
                "hostname splunksearch\n",

                "# Stop Splunk and reset password\n",
                "service splunk stop\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN enable boot-start -user splunk --accept-license --answer-yes --no-prompt\n",
                "touch $SPLUNK_HOME/etc/.ui_login\n",
                "mv $SPLUNK_HOME/etc/passwd $SPLUNK_HOME/etc/passwd.bak\n",
                "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
                "printf '\n%s\n%s = %s\n' [shclustering] register_replication_address $LOCALIP  >> /opt/splunk/etc/system/local/server.conf\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit user admin -password ", { "Ref": "SplunkAdminPassword" }, " -role admin -auth admin:changeme\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN start\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit licenser-localslave ",
                  "-master_uri https://", { "Fn::GetAtt": [ "SplunkELB", "DNSName" ] }, ":8089 ",
                  "-auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN init shcluster-config ",
                  "-mgmt_uri https://$LOCALIP:8089 -replication_port 8090 -replication_factor 3 ",
                  "-conf_deploy_fetch_url https://", { "Fn::GetAtt": [ "SplunkSHCDeployer", "PrivateIp" ] }, ":8089 ",
                  "-shcluster_label SplunkSHC ",
                  "-secret ", { "Ref": "SplunkSecret"}, " ",
                  "-auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config ",
                  "-mode searchhead -master_uri https://", { "Fn::GetAtt": [ "SplunkELB", "DNSName" ] }, ":8089 ",
                  "-secret ", { "Ref": "SplunkSecret"}, " ",
                  "-auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN restart\n",

                "/opt/aws/bin/cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" },
                " --resource SplunkSHCMember1",
                " --region ", { "Ref" : "AWS::Region" }, "\n",

                "usermod --expiredate 1 splunk\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT30M"
        }
      }
    },

    "SplunkSHCMember2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "CreateSHC",
      "DependsOn": "SplunkSHCDeployer",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Role", "Value": "splunk-search-head" },
          { "Key": "Name", "Value": "search-head-2" }
        ],
        "NetworkInterfaces": [{
          "GroupSet": [
            { "Ref": "SplunkSecurityGroup" },
            { "Ref": "SplunkSearchHeadSecurityGroup" }
          ],
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "DeleteOnTermination": "true",
          "SubnetId": { "Ref": "PublicSubnet1ID" }
        }],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": { "Fn::FindInMap": [ "SplunkConfig", "searchhead-disk-size", "gb" ] }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",

                "export LOCALIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "export INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                "export SPLUNK_USER=splunk\n",
                "export SPLUNK_BIN=/opt/splunk/bin/splunk\n",
                "export SPLUNK_HOME=/opt/splunk\n",

                "printf '%s\t%s\n' \"$LOCALIP\" 'splunksearch' >> /etc/hosts\n",
                "hostname splunksearch\n",

                "# Stop Splunk and reset password\n",
                "service splunk stop\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN enable boot-start -user splunk --accept-license --answer-yes --no-prompt\n",
                "touch $SPLUNK_HOME/etc/.ui_login\n",
                "mv $SPLUNK_HOME/etc/passwd $SPLUNK_HOME/etc/passwd.bak\n",
                "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
                "printf '\n%s\n%s = %s\n' [shclustering] register_replication_address $LOCALIP  >> /opt/splunk/etc/system/local/server.conf\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit user admin -password ", { "Ref": "SplunkAdminPassword" }, " -role admin -auth admin:changeme\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN start\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit licenser-localslave ",
                  "-master_uri https://", { "Fn::GetAtt": [ "SplunkELB", "DNSName" ] }, ":8089 ",
                  "-auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN init shcluster-config ",
                  "-mgmt_uri https://$LOCALIP:8089 -replication_port 8090 -replication_factor 3 ",
                  "-conf_deploy_fetch_url https://", { "Fn::GetAtt": [ "SplunkSHCDeployer", "PrivateIp" ] }, ":8089 ",
                  "-shcluster_label SplunkSHC ",
                  "-secret ", { "Ref": "SplunkSecret"}, " ",
                  "-auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config ",
                  "-mode searchhead -master_uri https://", { "Fn::GetAtt": [ "SplunkELB", "DNSName" ] }, ":8089 ",
                  "-secret ", { "Ref": "SplunkSecret"}, " ",
                  "-auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN restart\n",

                "/opt/aws/bin/cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" },
                " --resource SplunkSHCMember2",
                " --region ", { "Ref" : "AWS::Region" }, "\n",

                "usermod --expiredate 1 splunk\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT30M"
        }
      }
    },

    "SplunkSHCMember3": {
      "Type": "AWS::EC2::Instance",
      "Condition": "CreateSHC",
      "DependsOn": "SplunkSHCDeployer",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Role", "Value": "splunk-search-head" },
          { "Key": "Name", "Value": "search-head-3" }
        ],
        "NetworkInterfaces": [{
          "GroupSet": [
            { "Ref": "SplunkSecurityGroup" },
            { "Ref": "SplunkSearchHeadSecurityGroup" }
          ],
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "DeleteOnTermination": "true",
          "SubnetId": { "Ref": "PublicSubnet2ID" }
        }],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": { "Fn::FindInMap": [ "SplunkConfig", "searchhead-disk-size", "gb" ] }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",

                "export LOCALIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "export INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                "export SPLUNK_USER=splunk\n",
                "export SPLUNK_BIN=/opt/splunk/bin/splunk\n",
                "export SPLUNK_HOME=/opt/splunk\n",

                "printf '%s\t%s\n' \"$LOCALIP\" 'splunksearch' >> /etc/hosts\n",
                "hostname splunksearch\n",

                "# Stop Splunk and reset password\n",
                "service splunk stop\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN enable boot-start -user splunk --accept-license --answer-yes --no-prompt\n",
                "touch $SPLUNK_HOME/etc/.ui_login\n",
                "mv $SPLUNK_HOME/etc/passwd $SPLUNK_HOME/etc/passwd.bak\n",
                "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
                "printf '\n%s\n%s = %s\n' [shclustering] register_replication_address $LOCALIP  >> /opt/splunk/etc/system/local/server.conf\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit user admin -password ", { "Ref": "SplunkAdminPassword" }, " -role admin -auth admin:changeme\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN start\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit licenser-localslave ",
                  "-master_uri https://", { "Fn::GetAtt": [ "SplunkELB", "DNSName" ] }, ":8089 ",
                  "-auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN init shcluster-config ",
                  "-mgmt_uri https://$LOCALIP:8089 -replication_port 8090 -replication_factor 3 ",
                  "-conf_deploy_fetch_url https://", { "Fn::GetAtt": [ "SplunkSHCDeployer", "PrivateIp" ] }, ":8089 ",
                  "-shcluster_label SplunkSHC ",
                  "-secret ", { "Ref": "SplunkSecret"}, " ",
                  "-auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config ",
                  "-mode searchhead -master_uri https://", { "Fn::GetAtt": [ "SplunkELB", "DNSName" ] }, ":8089 ",
                  "-secret ", { "Ref": "SplunkSecret"}, " ",
                  "-auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN restart\n",

                "# Bootstrap SHC captain\n",
                "sudo -u $SPLUNK_USER $SPLUNK_BIN bootstrap shcluster-captain ",
                  "-servers_list \"",
                    "https://", { "Fn::GetAtt": [ "SplunkSHCMember1", "PrivateIp" ] }, ":8089,",
                    "https://", { "Fn::GetAtt": [ "SplunkSHCMember2", "PrivateIp" ] }, ":8089,",
                    "https://", "$LOCALIP", ":8089\"",
                  " -auth admin:", { "Ref": "SplunkAdminPassword" }, "\n",

                "sudo -u $SPLUNK_USER $SPLUNK_BIN restart\n",

                "/opt/aws/bin/cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" },
                " --resource SplunkSHCMember3",
                " --region ", { "Ref" : "AWS::Region" }, "\n",

                "usermod --expiredate 1 splunk\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT30M"
        }
      }
    },

    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Condition": "ConfigureLicense",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[{
            "Effect":"Allow",
            "Action": [
              "cloudformation:DescribeStackResource",
              "s3:GetObject"
            ],
            "Resource":"*"
          }]}
        }]
      }
    },

    "CfnKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Condition": "ConfigureLicense",
      "Properties" : {
        "UserName" : {"Ref": "CfnUser"}
      }
    },

    "BucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Condition": "ConfigureLicense",
      "Properties" : {
        "PolicyDocument": {
          "Version"      : "2008-10-17",
          "Id"           : "MyPolicy",
          "Statement"    : [{
            "Sid"        : "ReadAccess",
            "Action"     : ["s3:GetObject"],
            "Effect"     : "Allow",
            "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "SplunkLicenseBucket" }, "/*"]]},
            "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
          }]
        },
        "Bucket" : { "Ref" : "SplunkLicenseBucket" }
      }
    },

    "SplunkCMLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": { "Fn::If": [
          "ConfigureLicense",
          {
            "config": {
              "files": {
                "/etc/splunk/splunk.license" : {
                  "source" : { "Fn::If": [
                    "ConfigureLicense", 
                    {"Fn::Join" : ["", ["https://" , { "Ref" : "SplunkLicenseBucket" }, ".s3.amazonaws.com/", { "Ref" : "SplunkLicensePath" }]]},
                    {"Ref": "AWS::NoValue"}
                  ] },
                  "mode"  : "000600",
                  "owner" : "splunk",
                  "group" : "splunk",
                  "authentication": "S3AccessCreds"
                }
              }
            }
          },
          { "Ref" : "AWS::NoValue" }
        ]},
        "AWS::CloudFormation::Authentication": { "Fn::If": [
          "ConfigureLicense",
          {
            "S3AccessCreds" : {
              "type" : "S3",
              "accessKeyId" : { "Ref" : "CfnKeys" },
              "secretKey" : {"Fn::GetAtt": ["CfnKeys", "SecretAccessKey"]},
              "buckets" : [ { "Ref" : "SplunkLicenseBucket" } ]
            }
          },
          { "Ref" : "AWS::NoValue" }
        ]}
      },
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {"VolumeSize": 50 }
          }
        ],
        "SecurityGroups": [
          {"Ref": "SplunkSecurityGroup"},
          {"Ref": "SplunkSearchHeadSecurityGroup"}
        ],
        "ImageId": {
          "Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "AMI"]
        },
        "InstanceType": "c3.large",
        "KeyName": {"Ref": "KeyName"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",

                "export LOCALIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "export INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null)\n",
                "export SPLUNK_USER=splunk\n",
                "export SPLUNK_BIN=/opt/splunk/bin/splunk\n",
                "export SPLUNK_HOME=/opt/splunk\n",
                "hostname splunklicense\n",
                "printf '%s\t%s\n' \"$LOCALIP\" 'splunklicense' >> /etc/hosts\n",
                "HOME=$SPLUNK_HOME $SPLUNK_BIN stop\n",
                "mkdir -p /opt/splunk/etc/licenses/enterprise\n",

                "# Install files from the metadata\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ", { "Ref": "AWS::StackName" },
                "         --resource SplunkCMLaunchConfiguration",
                "         --region ", { "Ref": "AWS::Region" }, "\n",

                "mv /etc/splunk/splunk.license /opt/splunk/etc/licenses/enterprise/\n",
                "mv /opt/splunk/etc/passwd /opt/splunk/etc/passwd.bak\n",
                "mkdir -p /opt/splunk/.splunk\n",
                "chown -R splunk.splunk /opt/splunk/\n",

                "$SPLUNK_BIN enable boot-start -user splunk --accept-license --answer-yes --no-prompt\n",
                "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN start\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit user admin -password ",
                {
                  "Ref": "SplunkAdminPassword"
                },
                " -role admin -auth admin:changeme\n",
                "touch /opt/splunk/etc/.ui_login\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN add licenses /opt/splunk/etc/licenses/enterprise/splunk.license\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN login -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config -mode master -secret ",
                { "Ref": "SplunkSecret"},
                "\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config -replication_factor ",
                {
                  "Fn::FindInMap": ["SplunkConfig", "cluster-replication-factor", "repfactor"]
                },
                " -search_factor ",
                {
                  "Fn::FindInMap": ["SplunkConfig", "cluster-search-factor", "searchfactor"]
                },
                "\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config -cluster_label SplunkASGtest -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config -site default\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN stop\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN start\n",

                "/opt/aws/bin/cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" },
                " --resource SplunkCMASG",
                " --region ", { "Ref" : "AWS::Region" }, "\n",

                "usermod --expiredate 1 splunk\n"
              ]
            ]
          }
        }
      }
    },
    "SplunkIndexerLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": {"Fn::FindInMap": ["SplunkConfig", "indexer-disk-size", "gb"] }
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "SplunkSecurityGroup"
          }
        ],
        "ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "AMI"] },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",

                "export SPLUNK_USER=splunk\n",
                "export SPLUNK_BIN=/opt/splunk/bin/splunk\n",
                "export SPLUNK_HOME=/opt/splunk\n",
                "$SPLUNK_BIN stop\n",
                "mv /opt/splunk/etc/passwd /opt/splunk/etc/passwd.bak\n",
                "mkdir -p $SPLUNK_HOME/.splunk ; chown splunk:splunk $SPLUNK_HOME/.splunk\n",
                "export LOCALIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "$SPLUNK_BIN enable boot-start -user splunk --accept-license --answer-yes --no-prompt\n",
                "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN start\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit user admin -password ",
                {
                  "Ref": "SplunkAdminPassword"
                },
                " -role admin -auth admin:changeme\n",

                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit licenser-localslave -master_uri https://",
                {
                  "Fn::GetAtt": ["SplunkELB", "DNSName"]
                },
                ":8089 -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN stop\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN start --accept-license --answer-yes --no-prompt\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config -mode slave -master_uri https://",
                {
                  "Fn::GetAtt": ["SplunkELB", "DNSName"]
                },
                ":8089 -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                " -replication_port 9887 -secret ",
                { "Ref": "SplunkSecret"},
                "\n",
                "printf '\n%s\n%s = %s\n' [clustering] register_replication_address $LOCALIP  >> /opt/splunk/etc/system/local/server.conf\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN stop\n",
                "HOME=$SPLUNK_HOME sudo -u $SPLUNK_USER $SPLUNK_BIN start \n",

                "/opt/aws/bin/cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" },
                " --resource SplunkIndexerNodesASG",
                " --region ", { "Ref" : "AWS::Region" }, "\n",

                "usermod --expiredate 1 splunk\n"
              ]
            ]
          }
        }
      }
    },
    "SplunkELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Listeners": [
          {
            "LoadBalancerPort": "8089",
            "InstancePort": "8089",
            "Protocol": "tcp"
          },
          {
            "LoadBalancerPort": "8000",
            "InstancePort": "8000",
            "Protocol": "tcp"
          }
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          {"Ref": "SplunkSecurityGroup"},
          {"Ref": "SplunkSearchHeadSecurityGroup"}
        ],
        "Subnets": [
          {"Ref": "PublicSubnet1ID"},
          {"Ref": "PublicSubnet2ID"}
        ],
        "HealthCheck": {
          "Target": "TCP:8089",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "3",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "SplunkELBext": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Listeners": [
          {
            "LoadBalancerPort": "8000",
            "InstancePort": "8000",
            "Protocol": "tcp"
          }
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {"Ref": "SplunkSearchHeadSecurityGroup"}
        ],
        "Subnets": [
          {"Ref": "PublicSubnet1ID"},
          {"Ref": "PublicSubnet2ID"}
        ],
        "HealthCheck": {
          "Target": "TCP:8000",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "3",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },

    "SplunkSHCLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "CreateSHC",
      "Properties": {
        "Instances": [
          { "Ref": "SplunkSHCMember1" },
          { "Ref": "SplunkSHCMember2" },
          { "Ref": "SplunkSHCMember3" }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "8000",
            "InstancePort": "8000",
            "Protocol": "tcp"
          }
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          { "Ref": "SplunkSecurityGroup" },
          { "Ref": "SplunkSearchHeadSecurityGroup" }
        ],
        "Subnets": [
          { "Ref": "PublicSubnet1ID" },
          { "Ref": "PublicSubnet2ID" }
        ],
        "HealthCheck": {
          "Target": "TCP:8089",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "3",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "SplunkIndexerNodesASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": "SplunkCMASG",
      "Properties": {
        "VPCZoneIdentifier": [ 
          {"Ref": "PublicSubnet1ID"}, 
          {"Ref": "PublicSubnet2ID" } 
        ],
        "LaunchConfigurationName": {"Ref": "SplunkIndexerLaunchConfiguration"},
        "MinSize": {"Ref": "SplunkIndexerCount"},
        "MaxSize": {"Ref": "SplunkIndexerCount"},
        "DesiredCapacity": {"Ref": "SplunkIndexerCount"},
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" }, "PropagateAtLaunch": true },
          { "Key": "Role", "Value": "splunk-indexer", "PropagateAtLaunch": true },
          { "Key": "Name", "Value": "indexer-N", "PropagateAtLaunch": true  }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {"Ref": "SplunkIndexerCount"},
          "Timeout": "PT30M"
        }
      }
    },
    "SplunkCMASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": "SplunkELB",
      "Properties": {
        "VPCZoneIdentifier": [
          {"Ref": "PublicSubnet1ID"},
          {"Ref": "PublicSubnet2ID"}
        ],
        "LaunchConfigurationName": {"Ref": "SplunkCMLaunchConfiguration"},
        "LoadBalancerNames": [
          {"Ref": "SplunkELB"},
          {"Ref": "SplunkELBext"}
        ],
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "90",
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" }, "PropagateAtLaunch": true },
          { "Key": "Role", "Value": "splunk-indexer-cluster-master", "PropagateAtLaunch": true },
          { "Key": "Name", "Value": "cluster-master", "PropagateAtLaunch": true }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 1,
          "Timeout": "PT30M"
        }
      }
    }
  },
  "Outputs": {
    "SearchHeadURL": {
      "Description": "Search Head URL",
      "Value": {
        "Fn::Join": [ "", [
          "http://", { "Fn::If": [ "CreateSHC",
            { "Fn::GetAtt": [ "SplunkSHCLoadBalancer", "DNSName" ] },
            { "Fn::GetAtt": [ "SplunkSearchHeadInstance", "PublicDnsName" ] }
          ]},
          ":8000"
        ]]
      }
    },
    "ClusterMasterURL": {
      "Description": "Cluster Master URL",
      "Value": {
        "Fn::Join": [ "", [
          "http://",
          { "Fn::GetAtt": [ "SplunkELBext", "DNSName" ] },
          ":8000"
        ]]
      }
    },
    "Credentials": {
      "Description": "Admin credentials for Splunk search head URL.",
      "Value": {
        "Fn::Join": [ ":", [
          "admin", { "Ref": "SplunkAdminPassword" }
        ]]
      }
    }
  }
}