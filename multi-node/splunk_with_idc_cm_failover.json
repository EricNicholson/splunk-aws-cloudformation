{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Splunk Cluster with auto-healing cluster master.",
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Default": "c4.large",
      "AllowedValues": [
        "c4.large",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "m4.10xlarge",
        "r4.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "SplunkAdminPassword": {
      "Description": "Admin password for Splunk. (8-32 characters, alphanumeric only",
      "Type": "String",
      "MinLength": "6",
      "MaxLength": "32",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "Must be alphanumeric only.  6-32 characters"
    },
    "LicenseURL": {
      "Description": "URL to download Splunk License. (any web URL - e.g.: https://<s3 location>)",
      "Type": "String",
      "AllowedPattern": "(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "ConstraintDescription": "must be a valid URL - s3 URL mention..."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation": {
      "Description": " The IP address range that is allowed to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "19",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP range in x.x.x.x/x notation.  Use 0.0.0.0/0 for no restrictions."
    },
    "SplunkIndexerCount": {
      "Description": "How many Splunk indexers to launch.  [1-10]",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "10",
      "Default": "3",
      "ConstraintDescription": "must be a valid number, 1-10"
    },
    "VPCCIDR": {
      "Description": "The address space that will be assigned to the entire VPC where Splunk will reside. (Recommend at least a /16)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "19",
      "Default": "10.0.0.0/16",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SplunkSubnet1CIDR": {
      "Description": "The address space that will be assigned to the first Splunk server subnet. (x.x.x.x/x notation)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "19",
      "Default": "10.0.0.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SplunkSubnet2CIDR": {
      "Description": "The address space that will be assigned to the second Splunk server subnet. (x.x.x.x/x notation)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "19",
      "Default": "10.0.1.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings": {
    "RegionMap": {
      "ap-south-1": {"AMI": "ami-f7334798"},
      "eu-west-1": {"AMI": "ami-0097d073"},
      "ap-northeast-2": {"AMI": "ami-9c63b6f2"},
      "ap-northeast-1": {"AMI": "ami-c0479ba1"},
      "sa-east-1": {"AMI": "ami-dd2ebdb1"},
      "ca-central-1": {"AMI": "ami-105eec74"},
      "ap-southeast-1": {"AMI": "ami-52d87c31"},
      "ap-southeast-2": {"AMI": "ami-22576441"},
      "eu-central-1": {"AMI": "ami-b61fe3d9"},
      "us-east-1": {"AMI": "ami-231d5b34"},
      "us-east-2": {"AMI": "ami-fbf5ae9e"},
      "us-west-1": {"AMI": "ami-98ce80f8"},
      "us-west-2": {"AMI": "ami-b8835dd8"}
    },
    "SplunkConfig": {
      "indexer-disk-size": {"gb": "200"},
      "searchhead-disk-size": {"gb": "100"},
      "cluster-secret": {"secret": "changeme"},
      "cluster-replication-factor": {"repfactor": "2"},
      "cluster-search-factor": {"searchfactor": "2"}
    }
  },
  "Resources": {
    "User": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "AllPrivileges",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "*"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "AccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "User"
        }
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "SplunkSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "MapPublicIpOnLaunch": "true",
        "CidrBlock": {
          "Ref": "SplunkSubnet1CIDR"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "SplunkSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "MapPublicIpOnLaunch": "true",
        "CidrBlock": {
          "Ref": "SplunkSubnet2CIDR"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "SubnetRouteTable1Association": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SplunkSubnet1"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetRouteTable2Association": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SplunkSubnet2"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SplunkNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "InboundSplunkSearchHeadACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SplunkNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "8000",
          "To": "8000"
        }
      }
    },
    "InboundSSHACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SplunkNetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "SSHLocation"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "InboundSyslogACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SplunkNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "SSHLocation"
        },
        "PortRange": {
          "From": "514",
          "To": "514"
        }
      }
    },
    "InboundResponsePortsACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SplunkNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutBoundHTTPACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SplunkNetworkAcl"
        },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "OutBoundHTTPSACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SplunkNetworkAcl"
        },
        "RuleNumber": "105",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "OutBoundSSHACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SplunkNetworkAcl"
        },
        "RuleNumber": "106",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "OutBoundResponsePortsACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SplunkNetworkAcl"
        },
        "RuleNumber": "107",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "Subnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SplunkSubnet1"
        },
        "NetworkAclId": {
          "Ref": "SplunkNetworkAcl"
        }
      }
    },
    "Subnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SplunkSubnet2"
        },
        "NetworkAclId": {
          "Ref": "SplunkNetworkAcl"
        }
      }
    },
    "SplunkSearchHeadSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Enable port 8000 for Splunk web interface",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8000",
            "ToPort": "8000",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "SplunkSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Enable SSH, and all Splunk-related ports except web interface",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8089",
            "ToPort": "8089",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9997",
            "ToPort": "9997",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9887",
            "ToPort": "9887",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "514",
            "ToPort": "514",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          }
        ]
      }
    },
    "SplunkSearchHeadInstance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "SplunkCMASG",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "SecurityGroupIds": [
          {
            "Ref": "SplunkSecurityGroup"
          },
          {
            "Ref": "SplunkSearchHeadSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "SplunkSubnet1"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "role",
            "Value": "splunksearch"
          },
          {
            "Key": "Name",
            "Value": "splunksearch"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": {
                "Fn::FindInMap": [
                  "SplunkConfig",
                  "searchhead-disk-size",
                  "gb"
                ]
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "export INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                "printf '%s\t%s\n' \"$LOCALIP\" 'splunksearch' >> /etc/hosts\n",
                "hostname splunksearch\n",
                "mv /opt/splunk/etc/passwd /opt/splunk/etc/passwd.bak\n",
                "mkdir -p /opt/splunk/.splunk ; chown splunk:splunk /opt/splunk/.splunk\n",
                "mkdir -p /opt/splunk/etc/licenses/enterprise\n",
                "chown -R splunk:splunk /opt/splunk/etc/\n",
                "/opt/splunk/bin/splunk enable boot-start -user splunk --accept-license --answer-yes --no-prompt\n",
                "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
                "wget -O /opt/splunk/etc/licenses/enterprise/splunk.license ",
                {
                  "Ref": "LicenseURL"
                },
                " \n",
                "/opt/splunk/bin/splunk start\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit user admin -password ",
                {
                  "Ref": "SplunkAdminPassword"
                },
                " -role admin -auth admin:changeme\n",
                "touch /opt/splunk/etc/.ui_login\n",
                "sleep 60\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit licenser-localslave -master_uri https://",
                {
                  "Fn::GetAtt": [
                    "SplunkELB",
                    "DNSName"
                  ]
                },
                ":8089 -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit cluster-config -secret ",
                {
                  "Fn::FindInMap": [
                    "SplunkConfig",
                    "cluster-secret",
                    "secret"
                  ]
                },
                " -mode searchhead -master_uri https://",
                {
                  "Fn::GetAtt": [
                    "SplunkELB",
                    "DNSName"
                  ]
                },
                ":8089 -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk stop\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt\n",
                "usermod --expiredate 1 splunk\n"
              ]
            ]
          }
        }
      }
    },
    "SplunkSearchIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "SplunkSearchHeadInstance"
        }
      }
    },
    "SplunkCMLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/root/.aws/config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[default]",
                      "\n",
                      "aws_access_key_id = ",
                      {
                        "Ref": "AccessKey"
                      },
                      "\n",
                      "aws_secret_access_key = ",
                      {
                        "Fn::GetAtt": [
                          "AccessKey",
                          "SecretAccessKey"
                        ]
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 50
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "SplunkSecurityGroup"
          },
          {
            "Ref": "SplunkSearchHeadSecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": "c3.large",
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "exec &> /home/ec2-user/userdata.log\n",
                "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "export INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null)\n",
                "hostname splunklicense\n",
                "printf '%s\t%s\n' \"$LOCALIP\" 'splunklicense' >> /etc/hosts\n",
                "HOME=/home/splunk /opt/splunk/bin/splunk stop\n",
                "mv /opt/splunk/etc/passwd /opt/splunk/etc/passwd.bak\n",
                "mkdir -p /opt/splunk/etc/licenses/enterprise\n",
                "mkdir -p /opt/splunk/.splunk\n",
                "chown -R splunk.splunk /opt/splunk/\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk enable boot-start -user splunk --accept-license --answer-yes --no-prompt\n",
                "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
                "wget -O /opt/splunk/etc/licenses/enterprise/splunk.license ",
                {
                  "Ref": "LicenseURL"
                },
                " \n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk start \n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit user admin -password ",
                {
                  "Ref": "SplunkAdminPassword"
                },
                " -role admin -auth admin:changeme\n",
                "touch /opt/splunk/etc/.ui_login\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk add licenses /opt/splunk/etc/licenses/enterprise/splunk.license\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk login -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit cluster-config -mode master -secret ",
                {
                  "Fn::FindInMap": [
                    "SplunkConfig",
                    "cluster-secret",
                    "secret"
                  ]
                },
                "\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit cluster-config -replication_factor ",
                {
                  "Fn::FindInMap": [
                    "SplunkConfig",
                    "cluster-replication-factor",
                    "repfactor"
                  ]
                },
                " -search_factor ",
                {
                  "Fn::FindInMap": [
                    "SplunkConfig",
                    "cluster-search-factor",
                    "searchfactor"
                  ]
                },
                "\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit cluster-config -cluster_label SplunkASGtest -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit cluster-config -site default\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk stop\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk start \n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource SplunkCMLaunchConfiguration",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource SplunkCMASG",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "usermod --expiredate 1 splunk\n"
              ]
            ]
          }
        }
      }
    },
    "SplunkIndexerLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": {"Fn::FindInMap": ["SplunkConfig", "indexer-disk-size", "gb"] }
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "SplunkSecurityGroup"
          }
        ],
        "ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "AMI"] },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "exec &> /home/ec2-user/userdata.log\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk stop\n",
                "mv /opt/splunk/etc/passwd /opt/splunk/etc/passwd.bak\n",
                "mkdir -p /home/splunk/.splunk ; chown splunk:splunk /opt/splunk/.splunk\n",
                "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "printf '%s\t%s\n' \"",
                {
                  "Fn::GetAtt": [
                    "SplunkSearchHeadInstance",
                    "PrivateIp"
                  ]
                },
                "\" 'splunksearch' >> /etc/hosts\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk enable boot-start -user splunk --accept-license --answer-yes --no-prompt\n",
                "sed -i 's/force-change-pass true//' /etc/init.d/splunk\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk start\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit user admin -password ",
                {
                  "Ref": "SplunkAdminPassword"
                },
                " -role admin -auth admin:changeme\n",
                "sleep 90 && curl -k -u admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                " https://",
                {
                  "Fn::GetAtt": [
                    "SplunkSearchHeadInstance",
                    "PrivateIp"
                  ]
                },
                ":8089/services/search/distributed/peers -d name=$LOCALIP:8089 -d remoteUsername=admin -d remotePassword=",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit licenser-localslave -master_uri https://",
                {
                  "Fn::GetAtt": [
                    "SplunkELB",
                    "DNSName"
                  ]
                },
                ":8089 -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                "\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk stop\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk edit cluster-config -mode slave -master_uri https://",
                {
                  "Fn::GetAtt": [
                    "SplunkELB",
                    "DNSName"
                  ]
                },
                ":8089 -auth admin:",
                {
                  "Ref": "SplunkAdminPassword"
                },
                " -replication_port 9887 -secret ",
                {
                  "Fn::FindInMap": [
                    "SplunkConfig",
                    "cluster-secret",
                    "secret"
                  ]
                },
                "\n",
                "printf '\n%s\n%s = %s\n' [clustering] register_replication_address  \"$LOCALIP\"''  >> /opt/splunk/etc/system/local/server.conf\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk stop\n",
                "HOME=/home/splunk sudo -u splunk /opt/splunk/bin/splunk start \n",
                "usermod --expiredate 1 splunk\n"
              ]
            ]
          }
        }
      }
    },
    "SplunkELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Listeners": [
          {
            "LoadBalancerPort": "8089",
            "InstancePort": "8089",
            "Protocol": "tcp"
          },
          {
            "LoadBalancerPort": "8000",
            "InstancePort": "8000",
            "Protocol": "tcp"
          }
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Ref": "SplunkSecurityGroup"
          },
          {
            "Ref": "SplunkSearchHeadSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "SplunkSubnet1"
          },
          {
            "Ref": "SplunkSubnet2"
          }
        ],
        "LoadBalancerName": "SplunkELB",
        "HealthCheck": {
          "Target": "TCP:8089",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Interval": "20",
          "Timeout": "5"
        }
      }
    },
    "SplunkELBext": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Listeners": [
          {
            "LoadBalancerPort": "8000",
            "InstancePort": "8000",
            "Protocol": "tcp"
          }
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Ref": "SplunkSearchHeadSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "SplunkSubnet1"
          },
          {
            "Ref": "SplunkSubnet2"
          }
        ],
        "LoadBalancerName": "SplunkELBext",
        "HealthCheck": {
          "Target": "TCP:8000",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Interval": "20",
          "Timeout": "5"
        }
      }
    },
    "SplunkIndexerNodesASG": {
      "DependsOn": "SplunkCMASG",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "SplunkSubnet1"
          }
        ],
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "SplunkSubnet1",
              "AvailabilityZone"
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "SplunkIndexerLaunchConfiguration"
        },
        "MinSize": {
          "Ref": "SplunkIndexerCount"
        },
        "MaxSize": {
          "Ref": "SplunkIndexerCount"
        },
        "DesiredCapacity": {
          "Ref": "SplunkIndexerCount"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "role",
            "Value": "indexer",
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "SplunkCMASG": {
      "DependsOn": "SplunkELB",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "SplunkCMLaunchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "SplunkELB"
          },
          {
            "Ref": "SplunkELBext"
          }
        ],
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "90",
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            },
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "SplunkSubnet1"
          },
          {
            "Ref": "SplunkSubnet2"
          }
        ]
      }
    }
  },
  "Outputs": {
    "SearchHeadURL": {
      "Description": "Search Head URL",
      "Value": {
        "Fn::Join": [
          ":",
          [
            {
              "Ref": "SplunkSearchIP"
            },
            "8000"
          ]
        ]
      }
    },
    "LicenseServerURL": {
      "Description": "License Server URL",
      "Value": {
        "Fn::Join": [
          ":",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "SplunkELBext",
                "DNSName"
              ]
            },
            "8000"
          ]
        ]
      }
    },
    "Credentials": {
      "Description": "Admin credentials for Splunk search head URL.",
      "Value": {
        "Fn::Join": [
          ":",
          [
            "admin",
            {
              "Ref": "SplunkAdminPassword"
            }
          ]
        ]
      }
    }
  }
}