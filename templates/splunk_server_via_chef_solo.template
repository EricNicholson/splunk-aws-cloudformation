{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Adds a Splunk server to a VPC environment. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {
    "VpcId" : {
      "Type" : "String",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)"
    },

    "SubnetId" : {
      "Type" : "String",
      "Description" : "SubnetId of an existing Public or Private subnet in your Virtual Private Cloud (VPC)"
    },

    "InstanceType" : {
      "Description" : "Splunk Server EC2 instance type",
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro", "m1.small", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge","m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "BucketName" : {
      "Description" : "Name of S3 bucket with recipes & licenses to be accessed via authenticated requests",
      "Default" : "splunk-cloud",
      "Type" : "String"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "64" : "ami-3275ee5b" },
      "us-west-1"      : { "64" : "ami-66d1fc23" },
      "us-west-2"      : { "64" : "ami-ecbe2adc" },
      "eu-west-1"      : { "64" : "ami-44939930" },
      "sa-east-1"      : { "64" : "ami-dd6bb0c0" },
      "ap-southeast-1" : { "64" : "ami-aa9ed2f8" },
      "ap-southeast-2" : { "64" : "ami-363eaf0c" },
      "ap-northeast-1" : { "64" : "ami-173fbf16" }
    }
  },

  "Resources" : {

    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[{
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStackResource",
              "s3:GetObject"
            ],
            "Resource":"*"
          }]}
        }]
      }
    },

    "CfnKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "CfnUser"}
      }
    },

    "BucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument": {
          "Version"      : "2008-10-17",
          "Id"           : "MyPolicy",
          "Statement"    : [{
            "Sid"        : "ReadAccess",
            "Action"     : ["s3:GetObject"],
            "Effect"     : "Allow",
            "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "BucketName" }, "/*"]]},
            "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
          }]
        },
        "Bucket" : { "Ref" : "BucketName" }
      }
    },

    "SplunkServerIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "SplunkServerHost" }
      }
    },

    "SplunkServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VpcId" },
        "GroupDescription" : "Enable SSH access via port 22 and HTTP access via port 80",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "192.168.0.0/16" },
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },

    "SplunkServerHost" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn": "BucketPolicy",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "gcc" : [],
                "gcc-c++" : [],
                "make" : [],
                "automake" : [],
                "autoconf" : [],
                "ruby19" : [],
                "ruby19-devel" : [],
                "ruby19-irb" : [],
                "rubygems19" : [],
                "rubygem19-rdoc" : [],
                "rubygem19-rake" : [],
                "zlib-devel" : [],
                "kernel-devel" : [],
                "flex" : [],
                "bison" : [],
                "mlocate" : [],
                "httpd" : [],
                "python-boto": [],
                "git" : []
              }
            },
            "files" : {
              "/etc/yum.repos.d/epel.repo" : {
                "source" : "https://splunk-cloud.s3.amazonaws.com/amazon-linux/enable-epel-on-amazon-linux-ami",
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/chef/node.json" : {
                "content" : { "Fn::Join" : ["", [
                  "{\n",
                  "  \"override_attributes\": {\n",
                  "    \"splunk\": {\n",
                  "      \"web_server_port\": \"80\"\n",
                  "    }\n",
                  "  },\n",
                  "  \"run_list\": [\n",
                  "    \"recipe[system::base-packages]\",\n",
                  "    \"recipe[splunk::server]\"\n",
                  "  ]\n",
                  "}"
                ]]},
                "mode" : "000644",
                "owner" : "chef",
                "group" : "root"
              },
              "/etc/chef/solo.rb" : {
                "content" : { "Fn::Join" : ["", [
                  "log_level :info\n",
                  "log_location STDOUT\n",
                  "file_cache_path \"/var/chef-solo\"\n",
                  "cookbook_path \"/etc/chef/cookbooks\"\n",
                  "json_attribs \"/etc/chef/node.json\"\n"
                ]] },
                "mode"  : "000644",
                "owner" : "chef",
                "group" : "root"
              }
            },

            "sources" : {
              "/etc/chef/cookbooks/" : { "Fn::Join" : ["", ["https://" , { "Ref" : "BucketName" }, ".s3.amazonaws.com/cookbooks.tar.gz"]]}
            }
          }
        },

        "AWS::CloudFormation::Authentication" : {
          "S3AccessCreds" : {
            "type" : "S3",
            "accessKeyId" : { "Ref" : "CfnKeys" },
            "secretKey" : {"Fn::GetAtt": ["CfnKeys", "SecretAccessKey"]},
            "buckets" : [ { "Ref" : "BucketName" } ]
          }
        }
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "64" ]},
        "SecurityGroupIds" : [{ "Ref" : "SplunkServerSecurityGroup" }],
        "SubnetId" : { "Ref" : "SubnetId" },
        "KeyName" : { "Ref" : "KeyName" },
        "UserData": {
          "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash -v\n",

                "#enable epel here as a test\n",
                "yum-config-manager --enablerepo=epel\n",
                "yum update -y aws-cfn-bootstrap\n",

                "#do some chef things before the cfn-init due to race issues\n",
                "/bin/mkdir -p /etc/chef\n",
                "/bin/mkdir -p /var/lib/chef\n",
                "/bin/mkdir -p /var/log/chef\n",
                "/usr/sbin/groupadd chef -r\n",
                "/usr/sbin/useradd chef -r -s /bin/sh -d /var/lib/chef -g chef\n",

                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
                "  exit 1\n",
                "}\n",

                "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r SplunkServerHost ",
                "    --access-key ",  { "Ref" : "CfnKeys" },
                "    --secret-key ", {"Fn::GetAtt": ["CfnKeys", "SecretAccessKey"]},
                "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

                "#Ruby 1.8 doesn't quite cut it with the latest versions of chef. uninstall them and install 1.9\n",
                "yum erase -y ruby-libs ruby-1.8.7\n",
                "yum update -y \n",
                "ln -sf /usr/bin/ruby1.9 /usr/bin/ruby \n",
                "ln -sf /usr/bin/rake1.9 /usr/bin/rake\n",
                "ln -sf /usr/bin/rdoc1.9 /usr/bin/rdoc\n",
                "ln -sf /usr/bin/irb1.9 /usr/bin/irb\n",
                "ln -sf /usr/bin/gem1.9 /usr/bin/gem\n",

                "#chef needs the gecode package, but its broken in epel for ALinux. install from rbel instead\n",
                "yum install -y https://splunk-cloud.s3.amazonaws.com/amazon-linux/gecode-3.5.0-1.el6.x86_64.rpm\n",
                "yum install -y https://splunk-cloud.s3.amazonaws.com/amazon-linux/gecode-devel-3.5.0-1.el6.x86_64.rpm\n",
                "/sbin/ldconfig\n",

                "#instead of letting the bootstrap install things, we do it here first\n",
                "gem install chef --version 10.24.0 --no-ri --no-rdoc\n",
                "gem install ohai --version 6.16.0 --no-ri --no-rdoc\n",

                "#here we go! use chef-solo\n",
                "chown -R chef /etc/chef/*\n",
                "/bin/mkdir -p /var/chef-solo\n",
                "/usr/local/bin/chef-solo -c /etc/chef/solo.rb || error_exit 'Failed to run chef-solo'\n",

                "# All is well so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"Splunk server setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
              ]
            ]
          }
        }
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "SplunkServerHost",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "900"
      }
    }
  },

  "Outputs" : {

    "InstanceID" : {
      "Value" : {"Ref": "SplunkServerHost"},
      "Description" : "Splunk Server Instance ID"
    },

    "SplunkServerIPAddress" : {
      "Value" : {"Ref": "SplunkServerIPAddress"},
      "Description" : "Public IP address of Splunk Server"
    }
  }
}
